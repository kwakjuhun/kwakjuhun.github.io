{"version":3,"file":"component---src-templates-post-list-js-25cbf2bb1a52ba98334c.js","mappings":"8HAGMA,EAAWC,EAAAA,QAAAA,IAAAA,WAAH,8DAAGA,CAAH,ueA6BRC,EAASD,EAAAA,QAAAA,IAAAA,WAAH,4DAAGA,CAAH,6MAeNE,EAAOF,EAAAA,QAAAA,IAAAA,WAAH,0DAAGA,CAAH,+EAQJG,EAAQH,EAAAA,QAAAA,GAAAA,WAAH,2DAAGA,CAAH,uTAoBLI,EAAUJ,EAAAA,QAAAA,IAAAA,WAAH,6DAAGA,CAAH,+UAuBPK,EAAOL,EAAAA,QAAAA,IAAAA,WAAH,0DAAGA,CAAH,mEAoBV,IAdiB,SAAC,GAAuC,IAArCM,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAChCC,EAAoB,MAAXF,EACf,OACI,gBAACT,EAAD,CAAUW,OAAQA,GACd,gBAACT,EAAD,CAAQU,IAAKF,IACb,gBAACP,EAAD,KACI,gBAACC,EAAD,KAAQG,GACR,gBAACD,EAAD,KAAOE,GACP,gBAACH,EAAD,KAAUI,O,uDCpG1B,SAASI,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMT,EAAS,EAATA,MAC9BU,GAASC,EAAAA,EAAAA,gBAAe,YAAxBD,KAcFE,EAAkBL,GAAeG,EAAKG,aAAaN,YAEzD,OACE,gBAAC,IAAD,CACEO,eAAgB,CACdN,KAAAA,GAEFR,MAAOA,EACPe,cAAa,QAAUL,EAAKG,aAAab,MACzCS,KAAM,CACJ,CACEO,KAAK,cACLd,QAASU,GAEX,CACEK,SAAS,WACTf,QAASF,GAEX,CACEiB,SAAS,iBACTf,QAASU,GAEX,CACEK,SAAS,UACTf,QAAQ,WAEV,CACEc,KAAK,eACLd,QAAQ,WAEV,CACEc,KAAK,kBACLd,QAASQ,EAAKG,aAAaK,QAE7B,CACEF,KAAK,gBACLd,QAASF,GAEX,CACEgB,KAAK,sBACLd,QAASU,IAEXO,OAAOV,KAKfH,EAAIc,aAAe,CACjBZ,KAAK,KACLC,KAAM,GACNF,YAAY,IAUd,O,wFC/EMc,E,KAAkB3B,QAAAA,IAAAA,WAAH,qEAAGA,CAAH,uBAkCrB,UA9BiB,SAAC,GAA2B,IAAzB4B,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAChBC,EAAeF,EAAKG,OAAOC,MAC3BC,EAAWJ,EAAYI,SAC7B,OACI,gCACI,gBAAC,IAAD,CACE3B,MAAO2B,EACPC,SAAU,CAAC,OAAD,gDAGZ,gBAACP,EAAD,KACKG,EAAaK,KAAI,SAACP,EAAKQ,GACpB,IAAM9B,EAAQsB,EAAKS,KAAKC,YAAYhC,MAC9BC,EAAOqB,EAAKS,KAAKC,YAAY/B,KAC7BC,EAAUoB,EAAKS,KAAKE,QACpB5B,EAAM,IAAIiB,EAAKS,KAAKG,KAGpB/B,EAAuC,MAA7BmB,EAAKS,KAAKC,YAAYG,IAAa,KAAOb,EAAKS,KAAKC,YAAYG,IAAIC,mBAAmB,GAAGC,gBAAgBC,OAAOC,SAASlC,IAC1I,OACE,gBAAC,EAAAmC,KAAD,CAAMC,IAAKX,EAAOY,GAAIrC,GACpB,gBAAC,IAAD,CAAUL,MAAOA,EAAOC,KAAMA,EAAMC,QAASA,EAASC,QAASA","sources":["webpack://a_z-blog/./src/components/contentComponents/postInfo.js","webpack://a_z-blog/./src/components/seo.js","webpack://a_z-blog/./src/templates/postList.js"],"sourcesContent":["import React from 'react';\r\nimport styled, { css } from \"styled-components\";\r\n\r\nconst PostInfo = styled.div`\r\n    display: grid;\r\n    margin:10px;\r\n    grid-template-columns: 230px 700px;\r\n    grid-template-rows: 50px 20px 150px;\r\n    row-gap: 20px;\r\n    column-gap: 20px;\r\n    background: var(--third);\r\n    grid-template-areas:\r\n        \"img title\"\r\n        \"img date\"\r\n        \"img content\" ;\r\n    @media screen and (max-width: 990px){\r\n        // width: 90%;\r\n        grid-template-columns: 230px calc(100% - 260px);\r\n        grid-template-rows: 50px 20px 150px;\r\n    };\r\n    @media screen and (max-width: 600px){        \r\n        grid-template-columns: 100%;\r\n        grid-template-rows: 250px 50px 20px 150px;\r\n        grid-template-areas:\r\n        \"img\"\r\n        \"title\"\r\n        \"date\"\r\n        \"content\";\r\n    };\r\n`;\r\n\r\n\r\nconst ImgBox = styled.img`\r\n    grid-area: img;\r\n    height: 230px;\r\n    width: 230px;\r\n    backgroud:blue;\r\n    margin:10px;\r\n    border: 1px solid black;\r\n    @media screen and (max-width: 600px){        \r\n        margin: auto;\r\n    }\r\n    @media screen and (max-width: 290px){        \r\n        width: calc(100% - 20px);\r\n    }\r\n`;\r\n\r\nconst Info = styled.div`  \r\n    margin-left : 20px;\r\n\r\n    width : 650px;\r\n    @container (max-width: 200px){\r\n        width:100%;\r\n    }\r\n`;\r\nconst Title = styled.h1`\r\n    grid-area: title;\r\n    display: inline-block; \r\n    white-space: nowrap; \r\n    overflow: hidden; \r\n    text-overflow: ellipsis; \r\n    color: var(--primaryText);\r\n\r\n    white-space: normal; \r\n    line-height: 1; \r\n    height: 1em; \r\n    text-align: left; \r\n    word-wrap: break-word; \r\n    display: -webkit-box; \r\n    -webkit-line-clamp: 1; \r\n    -webkit-box-orient: vertical;\r\n\r\n    margin-left: 10px;\r\n    margin-right: 10px;\r\n`\r\nconst Content = styled.div` \r\n    grid-area: content;\r\n    display: inline-block; \r\n    white-space: nowrap; \r\n    overflow: hidden; \r\n    text-overflow: ellipsis; \r\n    color: var(--secondaryText);\r\n\r\n    white-space: normal; \r\n    line-height: 1.5; \r\n    height: 6em; \r\n    text-align: left; \r\n    word-wrap: break-word; \r\n    display: -webkit-box; \r\n    -webkit-line-clamp: 3; \r\n    -webkit-box-orient: vertical;\r\n\r\n    margin-left: 10px;\r\n    margin-right: 10px;\r\n    margin-top: 10px;\r\n`;\r\n\r\n\r\nconst Date = styled.div`\r\n    grid-area: date;\r\n    color: gray;\r\n    margin-left: 20px;\r\n    margin-right: 10px;\r\n`;\r\nconst postInfo = ({ title, date, content, imgPath }) => {\r\n    const isMain = content == null ? true : false\r\n    return(\r\n        <PostInfo isMain={isMain}>\r\n            <ImgBox src={imgPath}></ImgBox>\r\n            <Info>\r\n                <Title>{title}</Title>\r\n                <Date>{date}</Date>\r\n                <Content>{content}</Content>\r\n            </Info>\r\n        </PostInfo>\r\n    )\r\n}\r\n\r\nexport default postInfo;","/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Helmet from 'react-helmet'\r\nimport { useStaticQuery, graphql } from 'gatsby'\r\n\r\nfunction SEO({ description, lang, meta, title }) {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata.author,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n","import React from 'react';\r\nimport Index from './index'\r\nimport Content from '../components/content'\r\nimport {graphql, Link} from 'gatsby'\r\nimport PostInfo from '../components/contentComponents/postInfo'\r\nimport SEO from '../components/seo';\r\nimport styled from 'styled-components';\r\n\r\nconst PostListElement = styled.div`\r\n  margin-top: 100px;\r\n`;\r\n\r\nconst PostList = ({ data, pageContext }) => {   \r\n    const postListData = data.allMdx.edges\r\n    const category = pageContext.category\r\n    return (\r\n        <>\r\n            <SEO\r\n              title={category}\r\n              keywords={[`blog`, `gatsby`, `javascript`, `react`,`github pages`]}\r\n            />\r\n\r\n            <PostListElement>\r\n                {postListData.map((data,index)=>{\r\n                    const title = data.node.frontmatter.title\r\n                    const date = data.node.frontmatter.date\r\n                    const content = data.node.excerpt\r\n                    const src = \"/\"+data.node.slug\r\n                    // const imgPath = \"https://kwakjuhun.github.io/\"+data.node.frontmatter.img.childrenImageSharp[0].gatsbyImageData.images.fallback.src\r\n      \r\n                    const imgPath = data.node.frontmatter.img == null? null : data.node.frontmatter.img.childrenImageSharp[0].gatsbyImageData.images.fallback.src\r\n                    return (\r\n                      <Link key={index} to={src}>\r\n                        <PostInfo title={title} date={date} content={content} imgPath={imgPath}></PostInfo>\r\n                      </Link>\r\n                    )\r\n                })}\r\n            </PostListElement>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default PostList;\r\n\r\nexport const pageQuery = graphql`\r\nquery postList($category: String) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n      }\r\n    }\r\n    allMdx(\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: {frontmatter: {category: {in: [$category]}}}) {\r\n      edges {\r\n        node {\r\n          slug\r\n          frontmatter {\r\n            title\r\n            category\r\n            date\r\n            img {\r\n                childrenImageSharp {\r\n                  gatsbyImageData(formats: AUTO)\r\n                }\r\n              }\r\n            }\r\n        excerpt\r\n        }\r\n      }\r\n    }\r\n  }\r\n  `"],"names":["PostInfo","styled","ImgBox","Info","Title","Content","Date","title","date","content","imgPath","isMain","src","SEO","description","lang","meta","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","property","author","concat","defaultProps","PostListElement","data","pageContext","postListData","allMdx","edges","category","keywords","map","index","node","frontmatter","excerpt","slug","img","childrenImageSharp","gatsbyImageData","images","fallback","Link","key","to"],"sourceRoot":""}