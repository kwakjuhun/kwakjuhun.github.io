{"version":3,"file":"component---src-templates-post-list-js-106a8871d3ee80da5db2.js","mappings":"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","sources":["webpack://a_z-blog/./src/components/info.js","webpack://a_z-blog/./src/components/seo.js","webpack://a_z-blog/./src/components/contentComponents/postInfo.js","webpack://a_z-blog/./src/templates/postList.js"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst InfoElement = styled.div`\n    position: absolute;\n    top: 0px;\n    width: 100%;\n    background-color: #9AC95F;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: left;\n    height: 500px;\n`\nconst Title = styled.div`\n    color: #113800;\n    font-size: 3em;\n    font-weight: 900;\n    margin-left: 5vw;\n    @media screen and ${props => props.theme.size.mobile}{\n        font-size: 2em;   \n        font-weight: 600;\n    }\n`\nconst Date = styled.div`\n    margin-left: 5vw;\n    color: rgba(255,255,255,0.5);\n`\nconst Tags = styled.div`\n\n`\n\nconst Info = ({ title, date }) => {\n    if(date === undefined)\n        return (\n            <InfoElement>\n                <Title>{title}</Title>\n            </InfoElement>\n        )\n    else\n        return(\n            <InfoElement>\n                <Title>{title}</Title>\n                <Date>{date}</Date>\n                <Tags></Tags>\n            </InfoElement>\n        )\n    \n}\n\nexport default Info;","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from 'react';\nimport styled, { css } from \"styled-components\";\n\nconst PostInfo = styled.div`\n    display: grid;\n    margin:10px;\n    grid-template-columns: 230px 700px;\n    grid-template-rows: 50px 20px 150px;\n    row-gap: 20px;\n    column-gap: 20px;\n    background: var(--third);\n    grid-template-areas:\n        \"img title\"\n        \"img date\"\n        \"img content\" ;\n    @media screen and (max-width: 990px){\n        // width: 90%;\n        grid-template-columns: 230px calc(100% - 260px);\n        grid-template-rows: 50px 20px 150px;\n    };\n    @media screen and (max-width: 600px){        \n        grid-template-columns: 100%;\n        grid-template-rows: 250px 50px 20px 150px;\n        grid-template-areas:\n        \"img\"\n        \"title\"\n        \"date\"\n        \"content\";\n    };\n`;\n\n\nconst ImgBox = styled.img`\n    grid-area: img;\n    height: 230px;\n    width: 230px;\n    backgroud:blue;\n    margin:10px;\n    border: 1px solid black;\n    @media screen and (max-width: 600px){        \n        margin: auto;\n    }\n    @media screen and (max-width: 290px){        \n        width: calc(100% - 20px);\n    }\n`;\n\nconst Info = styled.div`  \n    margin-left : 20px;\n\n    width : 650px;\n    @container (max-width: 200px){\n        width:100%;\n    }\n`;\nconst Title = styled.h1`\n    grid-area: title;\n    display: inline-block; \n    white-space: nowrap; \n    overflow: hidden; \n    text-overflow: ellipsis; \n    color: var(--primaryText);\n\n    white-space: normal; \n    line-height: 1; \n    height: 1em; \n    text-align: left; \n    word-wrap: break-word; \n    display: -webkit-box; \n    -webkit-line-clamp: 1; \n    -webkit-box-orient: vertical;\n\n    margin-left: 10px;\n    margin-right: 10px;\n`\nconst Content = styled.div` \n    grid-area: content;\n    display: inline-block; \n    white-space: nowrap; \n    overflow: hidden; \n    text-overflow: ellipsis; \n    color: var(--secondaryText);\n\n    white-space: normal; \n    line-height: 1.5; \n    height: 6em; \n    text-align: left; \n    word-wrap: break-word; \n    display: -webkit-box; \n    -webkit-line-clamp: 3; \n    -webkit-box-orient: vertical;\n\n    margin-left: 10px;\n    margin-right: 10px;\n    margin-top: 10px;\n`;\n\n\nconst Date = styled.div`\n    grid-area: date;\n    color: gray;\n    margin-left: 20px;\n    margin-right: 10px;\n`;\nconst postInfo = ({ title, date, content, imgPath }) => {\n    const isMain = content == null ? true : false\n    return(\n        <PostInfo isMain={isMain}>\n            <ImgBox src={imgPath}></ImgBox>\n            <Info>\n                <Title>{title}</Title>\n                <Date>{date}</Date>\n                <Content>{content}</Content>\n            </Info>\n        </PostInfo>\n    )\n}\n\nexport default postInfo;","import React from 'react';\nimport Index from './index'\nimport Content from '../components/content'\nimport {graphql, Link} from 'gatsby'\nimport PostInfo from '../components/contentComponents/postInfo'\nimport SEO from '../components/seo';\nimport styled from 'styled-components';\nimport Info from '../components/info';\n\nconst PostListElement = styled.div`\n  margin-top: 550px;\n  margin-bottom: 40px;\n`;\n\nconst Year = styled.div`\n  color: orange;\n  font-size: 3em;\n  font-weight: bold;\n  margin-left: 30px;\n`\nconst Title = styled.div`\n  font-size: 1.5em;\n  margin-top: 4px;\n  margin-left: 50px;\n  &:hover{\n    font-size: 1.6em;\n  }\n`\n\nconst PostList = ({ data, pageContext }) => {   \n    const postListData = data.allMdx.edges\n    const category = pageContext.category\n    let year = 0;\n    return (\n        <>\n            <SEO\n              title={category}\n              keywords={[`blog`, `gatsby`, `javascript`, `react`,`github pages`,category]}\n            />\n            <Info title={category}></Info>\n            <PostListElement>\n                {\n                  postListData.map((data,index)=>{\n                    const title = data.node.frontmatter.title\n                    const date = data.node.frontmatter.date\n                    const [y, w, d] = date.split('-')\n                    const src = \"/\"+data.node.slug\n                    // console.log(y)\n                    if(year != y){\n                      year = y\n                      return (\n                        <>\n                          <Year>{year}</Year>\n                          <Link key={index} to={src}><Title>[{w}.{d}] - {title}</Title></Link>\n                        </>\n                      )\n                    }\n                    else{\n                        return(\n                          <Link key={index} to={src}><Title>[{w}.{d}] - {title}</Title></Link>\n                        )\n                    }\n                  })\n                }\n                {/* {postListData.map((data,index)=>{\n                    const title = data.node.frontmatter.title\n                    const date = data.node.frontmatter.date\n                    const content = data.node.excerpt\n                    const src = \"/\"+data.node.slug\n                    // const imgPath = \"https://kwakjuhun.github.io/\"+data.node.frontmatter.img.childrenImageSharp[0].gatsbyImageData.images.fallback.src\n      \n                    const imgPath = data.node.frontmatter.img == null? null : data.node.frontmatter.img.childrenImageSharp[0].gatsbyImageData.images.fallback.src\n                    return (\n                      <Link key={index} to={src}>\n                        <PostInfo title={title} date={date} content={content} imgPath={imgPath}></PostInfo>\n                      </Link>\n                    )\n                })} */}\n            </PostListElement>\n        </>\n    )\n};\n\nexport default PostList;\n\nexport const pageQuery = graphql`\nquery postList($category: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMdx(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {frontmatter: {category: {in: [$category]}}}) {\n      edges {\n        node {\n          slug\n          frontmatter {\n            title\n            category\n            date\n            img {\n                childrenImageSharp {\n                  gatsbyImageData(formats: AUTO)\n                }\n              }\n            }\n        excerpt\n        }\n      }\n    }\n  }\n  `"],"names":["InfoElement","styled","Title","props","theme","size","mobile","Date","Tags","title","date","undefined","SEO","description","lang","meta","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","PostListElement","Year","data","pageContext","postListData","allMdx","edges","category","year","keywords","map","index","node","frontmatter","split","y","w","d","src","slug","Link","key","to"],"sourceRoot":""}