{"version":3,"file":"component---src-templates-post-list-js-2b361272486533278baf.js","mappings":"2IAYA,SAASA,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MAC9BC,GAASC,EAAAA,EAAAA,gBAAe,YAAxBD,KAcFE,EAAkBN,GAAeI,EAAKG,aAAaP,YAEzD,OACE,gBAAC,IAAD,CACEQ,eAAgB,CACdP,KAAAA,GAEFE,MAAOA,EACPM,cAAa,QAAUL,EAAKG,aAAaJ,MACzCD,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASR,GAEX,CACES,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASP,EAAKG,aAAaM,QAE7B,CACEH,KAAK,gBACLC,QAASR,GAEX,CACEO,KAAK,sBACLC,QAASL,IAEXQ,OAAOZ,KAKfH,EAAIgB,aAAe,CACjBd,KAAK,KACLC,KAAM,GACNF,YAAY,IAUd,O,mHCpFMgB,EAAWC,EAAAA,QAAAA,IAAAA,WAAH,8DAAGA,CAAH,ueA6BRC,EAASD,EAAAA,QAAAA,IAAAA,WAAH,4DAAGA,CAAH,6MAeNE,EAAOF,EAAAA,QAAAA,IAAAA,WAAH,0DAAGA,CAAH,+EAQJG,EAAQH,EAAAA,QAAAA,GAAAA,WAAH,2DAAGA,CAAH,uTAoBLI,EAAUJ,EAAAA,QAAAA,IAAAA,WAAH,6DAAGA,CAAH,+UAuBPK,EAAOL,EAAAA,QAAAA,IAAAA,WAAH,0DAAGA,CAAH,mEAoBV,EAdiB,SAAC,GAAuC,IAArCd,EAAoC,EAApCA,MAAOoB,EAA6B,EAA7BA,KAAMZ,EAAuB,EAAvBA,QAASa,EAAc,EAAdA,QAChCC,EAAoB,MAAXd,EACf,OACI,gBAACK,EAAD,CAAUS,OAAQA,GACd,gBAACP,EAAD,CAAQQ,IAAKF,IACb,gBAACL,EAAD,KACI,gBAACC,EAAD,KAAQjB,GACR,gBAAC,EAAD,KAAOoB,GACP,gBAACF,EAAD,KAAUV,M,UCxGpBgB,EAAkBV,EAAAA,QAAAA,IAAAA,WAAH,qEAAGA,CAAH,uBAkCrB,EA9BiB,SAAC,GAA2B,IAAzBW,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAChBC,EAAeF,EAAKG,OAAOC,MAC3BC,EAAWJ,EAAYI,SAC7B,OACI,gCACI,gBAAC,IAAD,CACE9B,MAAO8B,EACPC,SAAU,CAAC,OAAD,gDAGZ,gBAACP,EAAD,KACKG,EAAaK,KAAI,SAACP,EAAKQ,GACpB,IAAMjC,EAAQyB,EAAKS,KAAKC,YAAYnC,MAC9BoB,EAAOK,EAAKS,KAAKC,YAAYf,KAC7BZ,EAAUiB,EAAKS,KAAKE,QACpBb,EAAM,IAAIE,EAAKS,KAAKG,KAGpBhB,EAAuC,MAA7BI,EAAKS,KAAKC,YAAYG,IAAa,KAAOb,EAAKS,KAAKC,YAAYG,IAAIC,mBAAmB,GAAGC,gBAAgBC,OAAOC,SAASnB,IAC1I,OACE,gBAAC,EAAAoB,KAAD,CAAMC,IAAKX,EAAOY,GAAItB,GACpB,gBAAC,EAAD,CAAUvB,MAAOA,EAAOoB,KAAMA,EAAMZ,QAASA,EAASa,QAASA","sources":["webpack://a_z-blog/./src/components/seo.js","webpack://a_z-blog/./src/components/contentComponents/postInfo.js","webpack://a_z-blog/./src/templates/postList.js"],"sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from 'react';\nimport styled, { css } from \"styled-components\";\n\nconst PostInfo = styled.div`\n    display: grid;\n    margin:10px;\n    grid-template-columns: 230px 700px;\n    grid-template-rows: 50px 20px 150px;\n    row-gap: 20px;\n    column-gap: 20px;\n    background: var(--third);\n    grid-template-areas:\n        \"img title\"\n        \"img date\"\n        \"img content\" ;\n    @media screen and (max-width: 990px){\n        // width: 90%;\n        grid-template-columns: 230px calc(100% - 260px);\n        grid-template-rows: 50px 20px 150px;\n    };\n    @media screen and (max-width: 600px){        \n        grid-template-columns: 100%;\n        grid-template-rows: 250px 50px 20px 150px;\n        grid-template-areas:\n        \"img\"\n        \"title\"\n        \"date\"\n        \"content\";\n    };\n`;\n\n\nconst ImgBox = styled.img`\n    grid-area: img;\n    height: 230px;\n    width: 230px;\n    backgroud:blue;\n    margin:10px;\n    border: 1px solid black;\n    @media screen and (max-width: 600px){        \n        margin: auto;\n    }\n    @media screen and (max-width: 290px){        \n        width: calc(100% - 20px);\n    }\n`;\n\nconst Info = styled.div`  \n    margin-left : 20px;\n\n    width : 650px;\n    @container (max-width: 200px){\n        width:100%;\n    }\n`;\nconst Title = styled.h1`\n    grid-area: title;\n    display: inline-block; \n    white-space: nowrap; \n    overflow: hidden; \n    text-overflow: ellipsis; \n    color: var(--primaryText);\n\n    white-space: normal; \n    line-height: 1; \n    height: 1em; \n    text-align: left; \n    word-wrap: break-word; \n    display: -webkit-box; \n    -webkit-line-clamp: 1; \n    -webkit-box-orient: vertical;\n\n    margin-left: 10px;\n    margin-right: 10px;\n`\nconst Content = styled.div` \n    grid-area: content;\n    display: inline-block; \n    white-space: nowrap; \n    overflow: hidden; \n    text-overflow: ellipsis; \n    color: var(--secondaryText);\n\n    white-space: normal; \n    line-height: 1.5; \n    height: 6em; \n    text-align: left; \n    word-wrap: break-word; \n    display: -webkit-box; \n    -webkit-line-clamp: 3; \n    -webkit-box-orient: vertical;\n\n    margin-left: 10px;\n    margin-right: 10px;\n    margin-top: 10px;\n`;\n\n\nconst Date = styled.div`\n    grid-area: date;\n    color: gray;\n    margin-left: 20px;\n    margin-right: 10px;\n`;\nconst postInfo = ({ title, date, content, imgPath }) => {\n    const isMain = content == null ? true : false\n    return(\n        <PostInfo isMain={isMain}>\n            <ImgBox src={imgPath}></ImgBox>\n            <Info>\n                <Title>{title}</Title>\n                <Date>{date}</Date>\n                <Content>{content}</Content>\n            </Info>\n        </PostInfo>\n    )\n}\n\nexport default postInfo;","import React from 'react';\nimport Index from './index'\nimport Content from '../components/content'\nimport {graphql, Link} from 'gatsby'\nimport PostInfo from '../components/contentComponents/postInfo'\nimport SEO from '../components/seo';\nimport styled from 'styled-components';\n\nconst PostListElement = styled.div`\n  margin-top: 100px;\n`;\n\nconst PostList = ({ data, pageContext }) => {   \n    const postListData = data.allMdx.edges\n    const category = pageContext.category\n    return (\n        <>\n            <SEO\n              title={category}\n              keywords={[`blog`, `gatsby`, `javascript`, `react`,`github pages`]}\n            />\n\n            <PostListElement>\n                {postListData.map((data,index)=>{\n                    const title = data.node.frontmatter.title\n                    const date = data.node.frontmatter.date\n                    const content = data.node.excerpt\n                    const src = \"/\"+data.node.slug\n                    // const imgPath = \"https://kwakjuhun.github.io/\"+data.node.frontmatter.img.childrenImageSharp[0].gatsbyImageData.images.fallback.src\n      \n                    const imgPath = data.node.frontmatter.img == null? null : data.node.frontmatter.img.childrenImageSharp[0].gatsbyImageData.images.fallback.src\n                    return (\n                      <Link key={index} to={src}>\n                        <PostInfo title={title} date={date} content={content} imgPath={imgPath}></PostInfo>\n                      </Link>\n                    )\n                })}\n            </PostListElement>\n        </>\n    )\n};\n\nexport default PostList;\n\nexport const pageQuery = graphql`\nquery postList($category: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMdx(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {frontmatter: {category: {in: [$category]}}}) {\n      edges {\n        node {\n          slug\n          frontmatter {\n            title\n            category\n            date\n            img {\n                childrenImageSharp {\n                  gatsbyImageData(formats: AUTO)\n                }\n              }\n            }\n        excerpt\n        }\n      }\n    }\n  }\n  `"],"names":["SEO","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","PostInfo","styled","ImgBox","Info","Title","Content","Date","date","imgPath","isMain","src","PostListElement","data","pageContext","postListData","allMdx","edges","category","keywords","map","index","node","frontmatter","excerpt","slug","img","childrenImageSharp","gatsbyImageData","images","fallback","Link","key","to"],"sourceRoot":""}