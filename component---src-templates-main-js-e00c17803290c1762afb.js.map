{"version":3,"file":"component---src-templates-main-js-e00c17803290c1762afb.js","mappings":"8HAEMA,EAAWC,EAAAA,QAAAA,IAAAA,WAAH,8DAAGA,CAAH,sEAKI,SAACC,GAAD,OAAWA,EAAMC,MAAMC,OAAOC,SAC1C,SAACH,GAAD,OAAWA,EAAMI,SAAUC,EAAAA,EAAAA,KAAhB,oDAQXC,EAASP,EAAAA,QAAAA,IAAAA,WAAH,4DAAGA,CAAH,yGAUNQ,EAAOR,EAAAA,QAAAA,IAAAA,WAAH,0DAAGA,CAAH,+EAQJS,EAAQT,EAAAA,QAAAA,GAAAA,WAAH,2DAAGA,CAAH,iRAME,SAACC,GAAD,OAAWA,EAAMC,MAAMC,OAAOO,eAcrCC,EAAUX,EAAAA,QAAAA,IAAAA,WAAH,6DAAGA,CAAH,qRAMA,SAACC,GAAD,OAAWA,EAAMC,MAAMC,OAAOS,iBAcrCC,EAAOb,EAAAA,QAAAA,IAAAA,WAAH,0DAAGA,CAAH,kCAkBV,IAdiB,SAAC,GAAuC,IAArCc,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAChCZ,EAAoB,MAAXW,EACf,OACI,gBAACjB,EAAD,CAAUM,OAAQA,GACd,gBAACE,EAAD,CAAQW,IAAKD,IACb,gBAACT,EAAD,KACI,gBAACC,EAAD,KAAQK,GACR,gBAACD,EAAD,KAAOE,GACP,gBAACJ,EAAD,KAAUK,O,uDC1E1B,SAASG,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMR,EAAS,EAATA,MAC9BS,GAASC,EAAAA,EAAAA,gBAAe,YAAxBD,KAcFE,EAAkBL,GAAeG,EAAKG,aAAaN,YAEzD,OACE,gBAAC,IAAD,CACEO,eAAgB,CACdN,KAAAA,GAEFP,MAAOA,EACPc,cAAa,QAAUL,EAAKG,aAAaZ,MACzCQ,KAAM,CACJ,CACEO,KAAK,cACLb,QAASS,GAEX,CACEK,SAAS,WACTd,QAASF,GAEX,CACEgB,SAAS,iBACTd,QAASS,GAEX,CACEK,SAAS,UACTd,QAAQ,WAEV,CACEa,KAAK,eACLb,QAAQ,WAEV,CACEa,KAAK,kBACLb,QAASO,EAAKG,aAAaK,QAE7B,CACEF,KAAK,gBACLb,QAASF,GAEX,CACEe,KAAK,sBACLb,QAASS,IAEXO,OAAOV,KAKfH,EAAIc,aAAe,CACjBZ,KAAK,KACLC,KAAM,GACNF,YAAY,IAUd,O,yFC/EMc,G,QAAWlC,EAAAA,QAAAA,IAAAA,WAAH,yDAAGA,CAAH,uEAQRmC,EAAYnC,EAAAA,QAAAA,IAAAA,WAAH,0DAAGA,CAAH,mBAGDA,EAAAA,QAAAA,IAAAA,WAAH,sDAAGA,CAAH,MAEWA,EAAAA,QAAAA,IAAAA,WAAH,8DAAGA,CAAH,oHAoDnB,UA1Ca,SAAC,GAAa,EAAXoC,KAEZ,OACI,gBAAC,IAAD,KACI,gBAAC,IAAD,CACItB,MAAO,YACPuB,SAAU,CAAC,OAAD,gDAEd,gBAAC,IAAD,KACI,gBAACH,EAAD,KACI,gBAACC,EAAD,KACI,2CAEJ,2BACA","sources":["webpack://a_z-blog/./src/components/contentComponents/postInfo.js","webpack://a_z-blog/./src/components/seo.js","webpack://a_z-blog/./src/templates/main.js"],"sourcesContent":["import React from 'react';\r\nimport styled, { css } from \"styled-components\";\r\nconst PostInfo = styled.div`\r\n    width:98%;\r\n    margin:1%;\r\n    height: 250px;\r\n    display: flex;\r\n    background: ${(props) => props.theme.colors.third};\r\n    ${(props) => props.isMain && css`\r\n        width: 30%;\r\n        display: inline-block;\r\n        height: null;\r\n    `}\r\n\r\n`;\r\n\r\nconst ImgBox = styled.img`\r\n    height: 230px;\r\n    width: 230px;\r\n    margin:10px;\r\n    border: 1px solid black;\r\n    @container (max-width: 30%){\r\n        width:100%;\r\n    }\r\n`;\r\n\r\nconst Info = styled.div`  \r\n    margin-left : 20px;\r\n    width : 650px;\r\n    @container (max-width: 200px){\r\n        width:100%;\r\n    }\r\n`;\r\n\r\nconst Title = styled.h1`\r\n    display: inline-block; \r\n    width: 590px; \r\n    white-space: nowrap; \r\n    overflow: hidden; \r\n    text-overflow: ellipsis; \r\n    color: ${(props) => props.theme.colors.primaryText};\r\n\r\n    white-space: normal; \r\n    line-height: 1; \r\n    height: 1em; \r\n    text-align: left; \r\n    word-wrap: break-word; \r\n    display: -webkit-box; \r\n    -webkit-line-clamp: 1; \r\n    -webkit-box-orient: vertical;\r\n\r\n    margin-top:30px;\r\n`\r\n\r\nconst Content = styled.div`\r\n    display: inline-block; \r\n    width: 590px; \r\n    white-space: nowrap; \r\n    overflow: hidden; \r\n    text-overflow: ellipsis; \r\n    color: ${(props) => props.theme.colors.secondaryText};\r\n\r\n    white-space: normal; \r\n    line-height: 1.5; \r\n    height: 4.5em; \r\n    text-align: left; \r\n    word-wrap: break-word; \r\n    display: -webkit-box; \r\n    -webkit-line-clamp: 3; \r\n    -webkit-box-orient: vertical;\r\n\r\n    margin-top:30px;\r\n`;\r\n\r\nconst Date = styled.div`\r\n    color: gray;\r\n    margin-left: 10px;\r\n`;\r\nconst postInfo = ({ title, date, content, imgPath }) => {\r\n    const isMain = content == null ? true : false\r\n    return(\r\n        <PostInfo isMain={isMain}>\r\n            <ImgBox src={imgPath}></ImgBox>\r\n            <Info>\r\n                <Title>{title}</Title>\r\n                <Date>{date}</Date>\r\n                <Content>{content}</Content>\r\n            </Info>\r\n        </PostInfo>\r\n    )\r\n}\r\n\r\nexport default postInfo;","/**\r\n * SEO component that queries for data with\r\n *  Gatsby's useStaticQuery React hook\r\n *\r\n * See: https://www.gatsbyjs.org/docs/use-static-query/\r\n */\r\n\r\nimport React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Helmet from 'react-helmet'\r\nimport { useStaticQuery, graphql } from 'gatsby'\r\n\r\nfunction SEO({ description, lang, meta, title }) {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{\r\n        lang,\r\n      }}\r\n      title={title}\r\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\r\n      meta={[\r\n        {\r\n          name: `description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          property: `og:description`,\r\n          content: metaDescription,\r\n        },\r\n        {\r\n          property: `og:type`,\r\n          content: `website`,\r\n        },\r\n        {\r\n          name: `twitter:card`,\r\n          content: `summary`,\r\n        },\r\n        {\r\n          name: `twitter:creator`,\r\n          content: site.siteMetadata.author,\r\n        },\r\n        {\r\n          name: `twitter:title`,\r\n          content: title,\r\n        },\r\n        {\r\n          name: `twitter:description`,\r\n          content: metaDescription,\r\n        },\r\n      ].concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default SEO\r\n","import React from 'react';\r\nimport { Link, graphql } from 'gatsby'\r\nimport Index from './index'\r\nimport Content from '../components/content'\r\nimport styled  from 'styled-components';\r\nimport SEO from '../components/seo';\r\nimport PostInfo from '../components/contentComponents/postInfo';\r\n\r\nconst MainPage = styled.div`\r\n    height: 100%;\r\n    // background:${(props)=>props.theme.colors.second}};\r\n    // color:${(props)=>props.theme.colors.secondaryText}};\r\n    background:var(--second);\r\n    color:var(--secondaryText);\r\n`\r\n\r\nconst Introduce = styled.div`\r\n    height: 500px;\r\n`\r\nconst Posts = styled.div`\r\n`\r\nconst CategoryPosts = styled.div`\r\n    width:100%;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    flex-direction: row;\r\n    justify-content: space-around;\r\n\talign-items: flex-start;\r\n`\r\n\r\n\r\nconst Main = ({ data }) => {\r\n    // const categoriesPosts = data.allMdx.group\r\n    return (\r\n        <Index>\r\n            <SEO\r\n                title={\"main Page\"}\r\n                keywords={[`blog`, `gatsby`, `javascript`, `react`,`github pages`]}\r\n            />\r\n            <Content>\r\n                <MainPage>\r\n                    <Introduce>\r\n                        <h1>간단한 본인 소개 부분</h1>\r\n                    </Introduce>\r\n                    <hr/>\r\n                    <h1>Posts</h1>\r\n                    {/* <Posts>\r\n                        {categoriesPosts.map(posts => {\r\n                            const category = posts.edges[0].node.frontmatter.category\r\n                            return(\r\n                                <div>\r\n                                    <h2>{category}</h2>\r\n                                    <hr/>\r\n                                    <CategoryPosts key={category}>\r\n                                        {posts.edges.map(post => {\r\n                                            const fm = post.node.frontmatter\r\n                                            console.log(fm)\r\n                                            const imgPath = fm.img == null? null:fm.img.childrenImageSharp[0].gatsbyImageData.images.fallback.src\r\n                                            return(\r\n                                                <PostInfo key={fm.title} title={fm.title} imgPath={imgPath}></PostInfo>\r\n                                            )\r\n                                        })}\r\n                                    </CategoryPosts>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </Posts> */}\r\n                </MainPage>\r\n            </Content>\r\n        </Index> \r\n    )\r\n};\r\n\r\nexport default Main;\r\n\r\n// export const mainPageQuery = graphql`\r\n// query mainQuery {\r\n//     allMdx(sort: {order: DESC, fields: frontmatter___date}) {\r\n//         group(field: frontmatter___category, limit: 6) {\r\n//             edges {\r\n//                 node {\r\n//                 frontmatter {\r\n//                     category\r\n//                     title\r\n//                     img {\r\n//                         childrenImageSharp {\r\n//                             gatsbyImageData(formats: AUTO)\r\n//                             }\r\n//                         }\r\n//                     }\r\n//                 }\r\n//             }\r\n//         }\r\n//     }\r\n// }\r\n// `"],"names":["PostInfo","styled","props","theme","colors","third","isMain","css","ImgBox","Info","Title","primaryText","Content","secondaryText","Date","title","date","content","imgPath","src","SEO","description","lang","meta","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","property","author","concat","defaultProps","MainPage","Introduce","data","keywords"],"sourceRoot":""}