{"version":3,"file":"component---src-pages-index-js-84ff3c9e030f3fe96d61.js","mappings":"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","sources":["webpack://a_z-blog/./src/Contexts.js","webpack://a_z-blog/./src/components/headerComponent/darkmodeToggle.js","webpack://a_z-blog/./src/components/header.js","webpack://a_z-blog/./src/components/test.js","webpack://a_z-blog/./src/styles/theme.js","webpack://a_z-blog/./src/darkmodeProvider.js","webpack://a_z-blog/./src/pages/index.js"],"sourcesContent":["import React from 'react';\r\n// import theme, {dark, light} from \"./styles/theme\";\r\nimport {ThemeProvider} from \"styled-components\";\r\n\r\nconst themeStateContext = React.createContext();\r\nconst themeChangeContext = React.createContext();\r\n\r\nfunction changeTheme(state, action){\r\n    state = state == 'light'?'dark':'light';\r\n    window.sessionStorage.setItem(\"theme\", state);\r\n    return state\r\n}\r\n\r\nfunction SelectThemeProvider({children}){\r\n    const isBrowser = typeof window !== \"undefined\";\r\n    let theme = 'light';\r\n    if(isBrowser){\r\n        theme = window.sessionStorage.getItem(\"theme\");\r\n        if(theme === null)\r\n            window.sessionStorage.setItem(\"theme\",\"light\")\r\n    }\r\n    const [state, dispatch] = React.useReducer(changeTheme, theme);\r\n    return(\r\n        <themeStateContext.Provider value={state}>\r\n            <themeChangeContext.Provider value={dispatch}>\r\n              {/* <ThemeProvider theme={state == 'light'? light:dark}> */}\r\n                {children}\r\n              {/* </ThemeProvider> */}\r\n            </themeChangeContext.Provider>\r\n        </themeStateContext.Provider>\r\n    )        \r\n}\r\n\r\nfunction useThemeState(){\r\n    const context = React.useContext(themeStateContext);\r\n    return context\r\n}\r\n\r\nfunction useThemeChange(){\r\n    const context = React.useContext(themeChangeContext);\r\n    return context\r\n}\r\n\r\nexport {\r\n    SelectThemeProvider,\r\n    useThemeState,\r\n    useThemeChange,\r\n}","import React, {useState, useEffect} from 'react';\r\nimport styled from 'styled-components';\r\nimport { useThemeChange, useThemeState } from '../../Contexts';\r\nconst Toggle = styled.label`\r\n  position: absolute;\r\n  top:10px;\r\n  right:10px;\r\n  width: 60px;\r\n  height: 34px;\r\n`;\r\n\r\n\r\nconst Slider = styled.span`\r\n  position: absolute;\r\n  cursor: pointer;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: #ccc;\r\n  -webkit-transition: .4s;\r\n  border-radius: 34px;\r\n  transition: .4s;\r\n  &:before {\r\n    position: absolute;\r\n    content: \"\";\r\n    height: 26px;\r\n    width: 26px;\r\n    left: 4px;\r\n    bottom: 4px;\r\n    background-color: white;\r\n    -webkit-transition: .4s;\r\n    transition: .4s;\r\n    border-radius: 50%;\r\n  }\r\n`;\r\nconst Checkbox = styled.input`\r\n  display:none;\r\n  &:checked + ${Slider}{\r\n    background-color: #2196F3;\r\n  }\r\n  &:focus + ${Slider} {\r\n    box-shadow: 0 0 1px #2196F3;\r\n  }\r\n  &:checked + ${Slider}:before {\r\n    -webkit-transform: translateX(26px);\r\n    -ms-transform: translateX(26px);\r\n    transform: translateX(26px);\r\n  }\r\n`;\r\n\r\nconst DarkmodeToggle = () => {\r\n\r\n  return (\r\n    <Toggle>\r\n      <Checkbox type=\"checkbox\" defaultChecked={useThemeState() === 'light'? false:true} onClick={useThemeChange({type:\"change\"})}></Checkbox>\r\n      <Slider></Slider>\r\n    </Toggle>\r\n  )\r\n}\r\nexport default DarkmodeToggle;","import React, { useState, useEffect } from \"react\";\r\nimport styled, { css } from \"styled-components\";\r\n// import theme from \"../styles/theme\";\r\nimport DarkmodeToggle from \"./headerComponent/darkmodeToggle\";\r\n\r\nconst Logo = styled.h2`\r\n    position: absolute;\r\n    left: 200px;\r\n    top: 10px;\r\n    text-align: center;\r\n`;\r\n\r\nconst Hamburger = styled.button`\r\n    position: absolute;\r\n    top: 0px;\r\n    left: 0px;\r\n    // display: block;\r\n    width : 80px;\r\n    height : 80px;\r\n    border: 0px;\r\n`;\r\nconst LineWrapper = styled.div`\r\n    cursor:pointer;\r\n    width:56px;  \r\n    height:35px;\r\n    position:relative;\r\n    // top:22.5px;\r\n    left:3px;\r\n`;\r\n\r\nconst Line = {\r\n    background:'black',\r\n    marginTop:'6px',\r\n    marginBottom:'6px',\r\n    width:'56px',\r\n    height:'7px',\r\n    borderRadius:'2px',\r\n    boxShadow:'0 1px 3px rgba(0,0,0,.5)',\r\n    position:'relative',\r\n};\r\nconst TopLine = styled.div`\r\n\r\n`\r\nconst MidLine = styled.div`\r\n\r\n`\r\nconst BottomLine = styled.div`\r\n\r\n`\r\n\r\n// const scrolled = css`\r\n//     box-shadow: 0 4px 4px rgba(31, 35, 46, .15);\r\n//     transition: box-shadow .5s ease-in;\r\n// `;\r\nconst HeaderElement = styled.div`\r\n    position: fixed;\r\n    width: 100%;\r\n    height: 80px;\r\n    background-color: #fff;\r\n    top: ${props => props.isHeader? '0px' : '-80px'};\r\n    z-index: 1;\r\n    opacity: 0.85;\r\n    backdrop-filter: blur(10px);\r\n    transition: .5s ease-out;\r\n\r\n    ${props => props.isScrolled && css`\r\n        box-shadow: 0 4px 4px rgba(31, 35, 46, .15);\r\n        transition: box-shadow .5s ease-in;    \r\n        transition: .5s ease-in;\r\n        `}\r\n`\r\n\r\nconst Header = () => {\r\n    const [isScrolled, setIsScrolled] = useState(false);\r\n    const [isHeader, setIsHeader] = useState(true);\r\n    const [thisLocation, setThisLocation] = useState(0);\r\n    const headerListener = () => {\r\n        const thisWinLocation = window.pageYOffset\r\n        if(thisLocation < thisWinLocation) { // 내림\r\n            setIsHeader(false)\r\n        }else{ // 올림\r\n            setIsHeader(true)\r\n        }\r\n        setThisLocation(thisWinLocation)\r\n        setIsScrolled(window.pageYOffset > 0);\r\n    };\r\n    useEffect(() => {\r\n      window.addEventListener(\"scroll\", headerListener);\r\n      return () => {\r\n        window.removeEventListener(\"scroll\", headerListener)\r\n      }\r\n    }, [isScrolled, thisLocation]);\r\n    \r\n\r\n    return(\r\n        <HeaderElement isScrolled={isScrolled} isHeader={isHeader}>\r\n            <Hamburger><LineWrapper>\r\n                <TopLine style={Line}></TopLine>\r\n                <MidLine style={Line}></MidLine>\r\n                <BottomLine style={Line}></BottomLine>\r\n            </LineWrapper></Hamburger>\r\n            <Logo>K-Blog</Logo>\r\n            <DarkmodeToggle/>\r\n        </HeaderElement>\r\n    )\r\n};\r\n//  깃, 이메일, 다크모드\r\nexport default Header;","import React, { useState } from \"react\";\r\nimport styled, { ThemeConsumer } from \"styled-components\";\r\nimport { useThemeState } from \"../Contexts\";\r\n\r\nconst TestComponent = styled.div`\r\n  width : 1000px;\r\n  height : 1009px;\r\n  // background: black;\r\n  background:${(props) => console.log(props) || props.theme.colors.bgColor};\r\n  // background:${(theme) => theme.theme.titleColor};\r\n`;\r\n\r\nconst Test = () => {\r\n  // const theme = useThemeState().colors;\r\n  // console.log(\"dd\", theme)\r\n  return (\r\n  // <TestComponent theme={theme}></TestComponent>\r\n  <TestComponent></TestComponent>\r\n  )\r\n};\r\n\r\nexport default Test;","const size = {\r\n    mobile: \"770px\",\r\n    tableS: \"1023px\",\r\n    tableM: \"1220px\",\r\n    tableL: \"1280px\",\r\n    laptop: \"1460px\",\r\n    desktop: \"1700px\",\r\n};\r\n\r\nconst theme = {\r\n    mobile: `(max-width: ${size.mobile})`,\r\n    tableS: `(max-width: ${size.tableS})`,\r\n    tableM: `(max-width: ${size.tableM})`,\r\n    tableL: `(max-width: ${size.tableL})`,\r\n    laptop: `(min-width: ${size.laptop})`,\r\n    desktop: `(min-width: ${size.desktop})`,\r\n}\r\n    \r\nexport default theme;\r\n\r\nexport const dark ={\r\n    colors:{\r\n        titleColor : '#F5EAEA',\r\n        bgColor: '#4D4D4D',\r\n    }\r\n}\r\n\r\nexport const light ={\r\n    colors:{\r\n        titleColor : '#4D4D4D',\r\n        bgColor: '#F5EAEA',\r\n    }\r\n}","import React, {useState} from \"react\"\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { useThemeState } from './Contexts';\r\nimport { dark, light } from \"./styles/theme\";\r\n\r\nconst Theme = ({children}) => {\r\n    return (\r\n        <ThemeProvider theme={useThemeState() == 'light'? light:dark}>\r\n            {children}\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nexport default Theme;","import React, { useState, createContext, useEffect } from \"react\"\r\nimport Header from \"../components/header\"\r\nimport Test from \"../components/test\"\r\nimport styled, { createGlobalStyle } from  'styled-components'\r\nimport DarkmodeProvider from '../darkmodeProvider';\r\nimport { SelectThemeProvider, useThemeState, useThemeChange } from \"../Contexts\"\r\nimport {dark, light} from \"../styles/theme\"\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  html{\r\n    height:200%;\r\n  }\r\n  body{\r\n    padding: 0;\r\n    margin: 0;\r\n    height:200%;\r\n  }\r\n`\r\nconst mainStyle = {\r\n  // border: '1px solid black' \r\n  height:'200%',\r\n}\r\n\r\nconst IndexPage = () => {\r\n  console.log(\"render\");\r\n  return (\r\n    <SelectThemeProvider>\r\n      <DarkmodeProvider>\r\n        <GlobalStyle/>\r\n          <main style={mainStyle}>\r\n              <Header></Header>\r\n              <Test></Test>\r\n          </main>\r\n      </DarkmodeProvider>\r\n    </SelectThemeProvider>\r\n  )\r\n}\r\n\r\nexport default IndexPage\r\n"],"names":["themeStateContext","React","themeChangeContext","changeTheme","state","action","window","sessionStorage","setItem","SelectThemeProvider","children","theme","getItem","dispatch","Provider","value","useThemeState","Toggle","styled","Slider","Checkbox","type","defaultChecked","onClick","Logo","Hamburger","LineWrapper","Line","background","marginTop","marginBottom","width","height","borderRadius","boxShadow","position","TopLine","MidLine","BottomLine","HeaderElement","props","isHeader","isScrolled","css","useState","setIsScrolled","setIsHeader","thisLocation","setThisLocation","headerListener","thisWinLocation","pageYOffset","useEffect","addEventListener","removeEventListener","style","TestComponent","console","log","colors","bgColor","dark","titleColor","light","ThemeProvider","GlobalStyle","createGlobalStyle","mainStyle"],"sourceRoot":""}