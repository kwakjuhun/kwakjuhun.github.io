{"version":3,"file":"component---src-pages-test-js-8fe7adea9eb2e8e93543.js","mappings":"8IAMMA,G,OAAgBC,EAAAA,QAAAA,IAAAA,WAAH,8DAAGA,CAAH,gDAGJ,SAACC,GAAD,OAAWA,EAAMC,MAAMC,OAAOC,YAW7C,UARa,WACX,OACA,gCACE,gBAACL,EAAD,S,mHCbEM,EAAoBC,EAAAA,gBACpBC,EAAqBD,EAAAA,gBAE3B,SAASE,EAAYC,EAAOC,GAGxB,OAFAD,GAASA,EACTE,OAAOC,eAAeC,QAAQ,aAAcJ,GACrCA,EAGX,SAASK,EAAT,GAAyC,IAAXC,EAAU,EAAVA,SAC1B,EAA0BT,EAAAA,WAAiBE,GAAa,GAAjDC,EAAP,KAAcO,EAAd,KAcA,OAZAC,EAAAA,EAAAA,YAAU,WACN,IACIf,GAAQ,EADwB,oBAAXS,SAIR,QADbT,EAAQS,OAAOC,eAAeM,QAAQ,eAElCP,OAAOC,eAAeC,QAAQ,cAAc,GAC9B,QAATX,GACLc,OAGV,CAACA,IAEC,gBAACX,EAAkBc,SAAnB,CAA4BC,MAAOX,GAC/B,gBAACF,EAAmBY,SAApB,CAA6BC,MAAOJ,GAC/BD,IAMjB,SAASM,IAEL,OADgBf,EAAAA,WAAiBD,GAIrC,SAASiB,IAEL,OADgBhB,EAAAA,WAAiBC","sources":["webpack://a_z-blog/./src/pages/test.js","webpack://a_z-blog/./src/providers/themeContext.js"],"sourcesContent":["import React from \"react\";\r\nimport { graphql } from \"gatsby\";\r\nimport styled, { ThemeConsumer } from \"styled-components\";\r\nimport { useThemeState } from \"../providers/themeContext\";\r\n\r\n\r\nconst TestComponent = styled.div`\r\n  width : 1000px;\r\n  height : 1000px;\r\n  background:${(props) => props.theme.colors.bgColor};\r\n`;\r\n\r\nconst Test = () => {\r\n  return (\r\n  <>\r\n    <TestComponent></TestComponent>\r\n  </>\r\n  )\r\n};\r\n\r\nexport default Test;","import React, { useEffect } from 'react';\r\n\r\nconst themeStateContext = React.createContext();\r\nconst themeChangeContext = React.createContext();\r\n\r\nfunction changeTheme(state, action){\r\n    state = !state;\r\n    window.sessionStorage.setItem(\"isDarkmode\", state);\r\n    return state\r\n}\r\n\r\nfunction SelectThemeProvider({children}){\r\n    const [state, dispatch] = React.useReducer(changeTheme, false);\r\n\r\n    useEffect(() => {\r\n        const isBrowser = typeof window !== \"undefined\";\r\n        let theme = false;\r\n        if(isBrowser){\r\n            theme = window.sessionStorage.getItem(\"isDarkmode\");\r\n            if(theme === null){\r\n                window.sessionStorage.setItem(\"isDarkmode\", false)\r\n            }else if(theme == \"true\"){\r\n                dispatch();\r\n            }\r\n        }\r\n    },[dispatch])\r\n    return(\r\n        <themeStateContext.Provider value={state}>\r\n            <themeChangeContext.Provider value={dispatch}>\r\n                {children}\r\n            </themeChangeContext.Provider>\r\n        </themeStateContext.Provider>\r\n    )        \r\n}\r\n\r\nfunction useThemeState(){\r\n    const context = React.useContext(themeStateContext);\r\n    return context\r\n}\r\n\r\nfunction useThemeChange(){\r\n    const context = React.useContext(themeChangeContext);\r\n    return context\r\n}\r\n\r\nexport {\r\n    SelectThemeProvider,\r\n    useThemeState,\r\n    useThemeChange,\r\n}"],"names":["TestComponent","styled","props","theme","colors","bgColor","themeStateContext","React","themeChangeContext","changeTheme","state","action","window","sessionStorage","setItem","SelectThemeProvider","children","dispatch","useEffect","getItem","Provider","value","useThemeState","useThemeChange"],"sourceRoot":""}